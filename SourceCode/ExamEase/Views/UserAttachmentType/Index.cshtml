@using ExamEase.Models;
@using ExamEase.Resources

@{
    ViewBag.Module = Resource.UserAttachmentType;
    ViewBag.Title = ViewBag.Module;
    Layout = "~/Views/Shared/_LayoutAfterLogin.cshtml";
    ViewBag.TableIdPrefix = "userattachmenttype";
    ViewBag.PartialViewWrapper = "userattachmenttype-partialview";
}

			<div class="card mb-10">

				<div class="card-body d-flex align-items-center p-0">

					<div class="bg-white rounded p-3 position-relative h-100 w-100  p-10">
						<div class="pb-2">
							<a class="btn btn-primary  hover-bg-primarycolor" href="@Url.Action("edit")"><i class="fa-solid fa-plus pe-1"></i> @Resource.AddNewRecord</a>
							<span onclick="exportToExcel('@ViewBag.TableIdPrefix', '@Resource.TableIsStillLoading')" data-bs-toggle="tooltip" data-bs-placement="right" title="@Resource.ExportToExcelNote" class="btn  btn-secondary  cursor-pointer "><i class="fa-solid fa-file-excel pe-1"></i> @Resource.ExporttoExcel</span>
							<span onclick="exportToPdf('@ViewBag.TableIdPrefix', '@Resource.TableIsStillLoading')" data-bs-toggle="tooltip" data-bs-placement="right" title="@Resource.ExportToPDFNote" class="btn  btn-secondary cursor-pointer "><i class="fa-solid fa-file-pdf pe-1"></i> @Resource.ExporttoPdf</span>
						</div>
						<div class="spinner-container d-none">
							<div class="spinner d-flex justify-content-center align-items-center text-center color-primarycolor py-5">
								<div class="py-3">
									<div class="spinner-border ml-auto" role="status" aria-hidden="true"></div><strong> &nbsp; @Resource.Loading </strong>
								</div>
							</div>
						</div>
						<div id="@ViewBag.PartialViewWrapper">
							<!-- display a dummy empty table while loading the data -->
							<div class="table-responsive mb-5">
								<table class="table table-hover align-middle mb-0">
									<thead class="table-light">
										<tr><th class="thead"></th></tr>
									</thead>
									<tbody></tbody>
								</table>
							</div>
							<div class="py-4"></div>
							<div class="dummyfooter row justify-content-between mt-5">
								<div class="col-md-6">@Resource.Showing0Entries</div>
								<div class="col-md-6 text-end">@Resource.Page0OfPage0</div>
							</div>
						</div>


				</div>
			</div>
			<!--end::Layout Builder Notice-->
			<!--begin::Layout Builder Modal-->
			<div class="modal fade" id="kt_layout_builder_recaptcha_modal" tabindex="-1"
				 role="dialog">
				<div class="modal-dialog modal-lg" role="document">
					<div class="modal-content">
						<div class="modal-header">
							<h3 class="modal-title" id="exampleModalLabel">
								reCaptcha Verification
							</h3>

							<button class="btn btn-sm btn-icon btn-light btn-hover-primary"
									data-bs-dismiss="modal" aria-label="Close">
								<i class="ki ki-close fs-4 text-muted"></i>
							</button>
						</div>
						<div class="modal-body">
							<form class="form">
								<div class="form-group">
									<script src="https://www.google.com/recaptcha/api.js"></script>
									<div class="g-recaptcha"
										 data-sitekey="6Lf92jMUAAAAANk8wz68r73rA2uPGr4_e0gn96BL">
									</div>
								</div>
							</form>
						</div>
						<div class="modal-footer">
							<button type="button" class="btn btn-primary  me-2"
									id="kt_layout_builder_verify">
								Submit
							</button>
							<button type="button"
									class="btn btn-hover-light btn-text-muted fw-semibold"
									data-bs-dismiss="modal">
								Close
							</button>
						</div>
					</div>
				</div>
			</div>
			<!--end::Layout Builder Modal-->
		</div>
	
@section scripts{
    <script>
        var tableIdPrefix = "@ViewBag.TableIdPrefix";
        var fileName = "@Resource.UserAttachmentType"; //the file name for excel and pdf file (Export to excel, pdf feature)
        var partialview = "@ViewBag.PartialViewWrapper";
        var loadTableUrl = "@Url.Action("GetPartialViewUserAttachmentType", "UserAttachmentType")";
        resetTable();

        function refreshTable(sort, search, pg, size) {
            if (sort == "undefined" || sort == undefined || sort == null) {
                sort = "";
            }
            if (pg == "undefined" || pg == undefined || pg == null) {
                pg = 1;
            }
            if (size == "undefined" || size == undefined || size == null) {
                size = "";
            }
            if (search == "undefined" || search == undefined || search == null) {
                let searchinput = document.querySelector('input[name="search"]');
                if (searchinput != null) {
                    if (searchinput.value == null || searchinput.value == "") {
                        search = "";
                    } else {
                        search = searchinput.value;
                    }
                } else {
                    search = "";
                }
            }
            $(".spinner-container").removeClass("d-none");
            var url = `${loadTableUrl}?sort=${sort}&search=${search}&pg=${pg}&size=${size}`;
            loadData(url);
        }

        function resetTable() {
            $(".spinner-container").removeClass("d-none");
            var url = loadTableUrl;
            loadData(url);
        }

        function loadData(url) {
            fetch(url)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.text();
                })
                .then(data => {
                    $(`#${partialview}`).html(data);
                    formatDateTimeText();
                })
                .catch(error => {
                    console.error('There was a problem with the fetch operation:', error);
                })
                .finally(() => {
                    $(".spinner-container").addClass("d-none");
                });
        }
    </script>
}